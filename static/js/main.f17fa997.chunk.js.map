{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Infofield","react_default","a","createElement","className","this","props","label","value","React","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","show","lab","vl","App_Infofield","setState","_this2","classShow","renderField","onClick","handleClick","id","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uKCIlCC,gMAEF,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,cACdC,KAAKC,MAAMC,OAFhB,KAIEN,EAAAC,EAAAC,cAAA,gBAAQE,KAAKC,MAAME,eAPHC,IAAMC,YA6DfC,cA1Cb,SAAAA,EAAYL,GAAO,IAAAM,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAR,KAAAM,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAR,KAAAQ,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAZ,KAAMC,KACAY,MAAQ,CACZC,MAAM,GAHSP,2EAJPQ,EAAIC,GACd,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,CAAWd,MAAOa,EAAId,MAAOa,2DAYd,GAAnBf,KAAKa,MAAMC,KACZd,KAAKkB,SAAS,CAACJ,MAAM,IAErBd,KAAKkB,SAAS,CAACJ,MAAM,qCAKhB,IAAAK,EAAAnB,KACDoB,EAAY,YAAgC,GAAnBpB,KAAKa,MAAMC,KAAc,OAAO,QAC/D,OACElB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXC,KAAKqB,YAAY,aAAa,OAC9BrB,KAAKqB,YAAY,YAAY,cAC7BrB,KAAKqB,YAAY,QAAQ,sBACzBrB,KAAKqB,YAAY,WAAW,WAC5BrB,KAAKqB,YAAY,MAAM,kBAE3BzB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAauB,QAAS,kBAAMH,EAAKI,gBAAgBvB,KAAKa,MAAMC,KAAK,kBAAkB,mBAChGlB,EAAAC,EAAAC,cAAA,QAAM0B,GAAG,UAAUzB,UAAWqB,GAA9B,6mBAnCUf,aCLEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f17fa997.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass Infofield extends React.Component {\n  render() {\n    return (\n      <div className=\"info-field\">\n        <label className=\"info-label\">\n          {this.props.label}\n        </label> :\n        <span> {this.props.value}</span>\n      </div>\n    );\n  }\n}\n\nclass App extends Component {\n\n  renderField(lab,vl) {\n    return <Infofield value={vl} label={lab} />;\n  }\n   \n  constructor(props) {\n    super(props);\n     this.state = {\n      show: false\n     };\n  } \n\n  handleClick() {\n    \n    if(this.state.show == true){\n      this.setState({show: false});\n    }else{\n      this.setState({show: true});\n    }\n    \n  };\n \n  render() {\n    const classShow = \"details \"+((this.state.show == true)?\"show\":\"hide\");\n    return (\n      <div className=\"App\">\n        <div className=\"info-row\">\n           {this.renderField('First Name','Dat')}\n           {this.renderField('Last Name','Hoang Quoc')}\n           {this.renderField('Email','dat@shopstack.asia')}\n           {this.renderField('Birthday','09-1984')}\n           {this.renderField('Job','web developer')}\n        </div>\n        <p className=\"load-more\"  onClick={() => this.handleClick()}>{this.state.show?\"hide details...\":\"more details...\"}</p>\n        <span id=\"details\" className={classShow} > Born with a curiosity of the computer area and how to develop its software, \n          I was soon into programming since I was a high school boy, \n          especially with PHP language and its open-source solutions for the web development like Magento. \n          Understanding the importance of creating highly readable and easily maintainable source code, \n          Iâ€™m eager to become a professional result-oriented developer. \n          Personally, I also believe that good time management is one of the key factors that makes a project run successfully. \n          Therefore, I always organize my tasks into a priority matrix so that none of them will be missed. \n        </span>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}